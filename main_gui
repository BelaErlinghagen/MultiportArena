import dearpygui.dearpygui as dpg
import serial
import time
import json
import os
import ctypes
from shared_states import buttons_trials, buttons_lickports2, buttons_lickports1, remembered_relays, active_theme, ser1, ser2
from utils import (
    clean_serial_line, update_plot_series, send_serial_command,
    setup_button_theme, shift_data_window, set_trial_phase,
    toggle_trial_button, toggle_lickport_button, parse_sensor_line,
    setup_dynamic_plots
)

# Constants and globals
MAX_POINTS = 300
UPDATE_PLOT_EVERY_N_FRAMES = 2

sensor_mapping = {
    "ser1": [1, 2],  # Maps ser1 values to sensors 1 and 2
    "ser2": [9, 10],     # Maps ser2 values to sensor 9
}

data_buffers = [[] for _ in range(16)]  # Support for 16 sensors
timestamps = [[] for _ in range(16)]

plots_initialized = False
frame_counter = 0

label_table = [[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]
trial_labels = [["Reward-Phase", "Intertrial-Phase"]]

def get_screen_dimensions():
    user32 = ctypes.windll.user32
    user32.SetProcessDPIAware()
    screen_width = user32.GetSystemMetrics(0)
    screen_height = user32.GetSystemMetrics(1)
    return screen_width, screen_height

def initialize_serial_connections():
    global ser1, ser2
    try:
        # These come from shared_states import
        ser1 = ser1
        ser2 = ser2
        time.sleep(3)
        print("Serial connections established.")
    except serial.SerialException as e:
        print(f"Serial connection failed: {e}")
        ser1 = None
        ser2 = None

def build_gui():
    import os
    global active_theme
    screen_width, screen_height = get_screen_dimensions()

    dpg.create_context()
    dpg.create_viewport(title='Multiport', width=screen_width, height=screen_height)
    dpg.setup_dearpygui()
    dpg.set_viewport_pos([0, 0])

    active_theme = setup_button_theme()

    def show_main_window():
        dpg.hide_item("intro_window")
        dpg.show_item("main_window")

    def check_ready_state():
        mouse_file = dpg.get_value("mouse_file_path")
        protocol_file = dpg.get_value("protocol_file_path")
        if mouse_file.endswith(".json") and protocol_file.endswith(".json"):
            dpg.configure_item("ready_button", show=True)
        else:
            dpg.configure_item("ready_button", show=False)

    def mouse_file_selected(sender, app_data):
        path = app_data['file_path_name']
        if path.endswith(".json"):
            dpg.set_value("mouse_file_path", path)
        check_ready_state()

    def protocol_file_selected(sender, app_data):
        path = app_data['file_path_name']
        if path.endswith(".json"):
            dpg.set_value("protocol_file_path", path)
        check_ready_state()

    # === Welcome Window ===
    welcome_width = 600
    welcome_height = 400
    with dpg.window(label="Welcome / Setup", tag="intro_window", width=welcome_width, height=welcome_height, no_close=True, no_resize=True, no_move=True):
        with dpg.group(horizontal=False):
            dpg.add_text("Welcome to the Multiport System", indent=200)
            with dpg.group(horizontal=True):
                run_button = dpg.add_button(label="Run Experiment", width=200, callback=lambda: dpg.show_item("experiment_setup_group"))
                clean_button = dpg.add_button(label="Cleaning", width=200, callback=lambda: print("Cleaning protocol..."))
                dpg.bind_item_theme(run_button, active_theme)
                dpg.bind_item_theme(clean_button, active_theme)

            with dpg.group(tag="experiment_setup_group", show=False):
                dpg.add_separator()

                dpg.add_text("Mouse File")
                with dpg.group(horizontal=True):
                    dpg.add_input_text(tag="mouse_file_path", readonly=True)
                    dpg.add_button(label="Browse", callback=lambda: dpg.show_item("mouse_file_dialog"))
                    dpg.add_button(label="New File", callback=lambda: dpg.show_item("new_mouse_file_window"))

                dpg.add_text("Protocol File")
                with dpg.group(horizontal=True):
                    dpg.add_input_text(tag="protocol_file_path", readonly=True)
                    dpg.add_button(label="Browse", callback=lambda: dpg.show_item("protocol_file_dialog"))
                    dpg.add_button(label="New File", callback=lambda: dpg.show_item("new_protocol_file_window"))

                dpg.add_button(label="Ready", tag="ready_button", callback=show_main_window, show=False)

    dpg.set_item_pos("intro_window", [(screen_width - welcome_width) // 2, (screen_height - welcome_height) // 2])

    with dpg.file_dialog(directory_selector=False, show=False, callback=mouse_file_selected, tag="mouse_file_dialog", width=700, height=400):
        dpg.add_file_extension(".json", color=(0, 255, 0, 255))

    with dpg.file_dialog(directory_selector=False, show=False, callback=protocol_file_selected, tag="protocol_file_dialog", width=700, height=400):
        dpg.add_file_extension(".json", color=(0, 255, 0, 255))

    # === New Mouse File Window ===
    temp_mouse_data = {}

    def finalize_mouse_file(overwrite=False):
        mouse_id = temp_mouse_data["MouseID"]
        filename = f"Mouse_{mouse_id}.json"
        if not overwrite and os.path.exists(filename):
            dpg.configure_item("mouse_overwrite_popup", show=False)
            dpg.configure_item("mouse_overwrite_popup", show=True)
            return
        with open(filename, "w") as f:
            json.dump(temp_mouse_data, f, indent=4)
        print(f"Mouse file {'overwritten' if overwrite else 'created'}: {filename}")
        dpg.set_value("mouse_file_path", filename)
        dpg.hide_item("new_mouse_file_window")
        check_ready_state()

    def create_mouse_file():
        mouse_id = dpg.get_value("mouse_id_input")
        age = dpg.get_value("mouse_age_input")
        genotype = dpg.get_value("mouse_genotype_input")
        notes = dpg.get_value("mouse_notes_input")

        if not mouse_id.strip():
            print("Mouse ID cannot be empty.")
            return

        temp_mouse_data.clear()
        temp_mouse_data.update({
            "MouseID": mouse_id,
            "Age": age,
            "Genotype": genotype,
            "Notes": notes
        })

        filename = f"Mouse_{mouse_id}.json"
        if os.path.exists(filename):
            dpg.configure_item("mouse_overwrite_popup", show=True)
        else:
            finalize_mouse_file()

    with dpg.window(label="Create New Mouse File", tag="new_mouse_file_window", modal=True, show=False, width=400, height=300):
        dpg.add_text("Enter Mouse Information:")
        dpg.add_input_text(label="Mouse ID", tag="mouse_id_input")
        dpg.add_input_text(label="Age", tag="mouse_age_input")
        dpg.add_input_text(label="Genotype", tag="mouse_genotype_input")
        dpg.add_input_text(label="Notes", tag="mouse_notes_input")
        with dpg.group(horizontal=True):
            create_mouse_btn = dpg.add_button(label="Create", callback=create_mouse_file)
            dpg.add_button(label="Close", callback=lambda: dpg.hide_item("new_mouse_file_window"))

    # Popup attached to the create button (not the window)
    with dpg.popup(parent=create_mouse_btn, tag="mouse_overwrite_popup", modal=True):
        dpg.add_text("Mouse file already exists. Overwrite?")
        with dpg.group(horizontal=True):
            dpg.add_button(label="Yes", callback=lambda: finalize_mouse_file(overwrite=True))
            dpg.add_button(label="No", callback=lambda: dpg.configure_item("mouse_overwrite_popup", show=False))

    # === New Protocol File Window ===
    temp_protocol_data = {}

    def finalize_protocol_file(overwrite=False):
        protocol_name = temp_protocol_data["ProtocolName"]
        filename = f"Protocol_{protocol_name}.json"
        if not overwrite and os.path.exists(filename):
            dpg.configure_item("protocol_overwrite_popup", show=False)
            dpg.configure_item("protocol_overwrite_popup", show=True)
            return
        with open(filename, "w") as f:
            json.dump(temp_protocol_data, f, indent=4)
        print(f"Protocol file {'overwritten' if overwrite else 'created'}: {filename}")
        dpg.set_value("protocol_file_path", filename)
        dpg.hide_item("new_protocol_file_window")
        check_ready_state()

    def create_protocol_file():
        protocol_name = dpg.get_value("protocol_name_input")
        trials = dpg.get_value("protocol_trials_input")
        duration = dpg.get_value("protocol_duration_input")
        comments = dpg.get_value("protocol_comments_input")

        if not protocol_name.strip():
            print("Protocol name cannot be empty.")
            return

        temp_protocol_data.clear()
        temp_protocol_data.update({
            "ProtocolName": protocol_name,
            "NumberOfTrials": trials,
            "RewardDuration_ms": duration,
            "Comments": comments
        })

        filename = f"Protocol_{protocol_name}.json"
        if os.path.exists(filename):
            dpg.configure_item("protocol_overwrite_popup", show=True)
        else:
            finalize_protocol_file()

    with dpg.window(label="Create New Protocol File", tag="new_protocol_file_window", modal=True, show=False, width=400, height=300):
        dpg.add_text("Enter Protocol Information:")
        dpg.add_input_text(label="Protocol Name", tag="protocol_name_input")
        dpg.add_input_int(label="Number of Trials", tag="protocol_trials_input", default_value=10)
        dpg.add_input_int(label="Reward Duration (ms)", tag="protocol_duration_input", default_value=500)
        dpg.add_input_text(label="Comments", tag="protocol_comments_input", multiline=True)
        with dpg.group(horizontal=True):
            create_protocol_btn = dpg.add_button(label="Create", callback=create_protocol_file)
            dpg.add_button(label="Close", callback=lambda: dpg.hide_item("new_protocol_file_window"))

    # Popup attached to the create protocol button
    with dpg.popup(parent=create_protocol_btn, tag="protocol_overwrite_popup", modal=True):
        dpg.add_text("Protocol file already exists. Overwrite?")
        with dpg.group(horizontal=True):
            dpg.add_button(label="Yes", callback=lambda: finalize_protocol_file(overwrite=True))
            dpg.add_button(label="No", callback=lambda: dpg.configure_item("protocol_overwrite_popup", show=False))




    # === Main Window Layout ===
    with dpg.window(label="Main Window", tag="main_window", show=False,
                    no_resize=True, no_move=True,
                    width=screen_width, height=screen_height):

        with dpg.group(horizontal=False):
            dpg.add_spacer(width=50, height = 50)
            dpg.add_text("Trial Phase", indent = 480)
            with dpg.group(horizontal=True):
                with dpg.table(width=1100, header_row=False):  # width adjustable
                    # Add two columns for two buttons
                    dpg.add_table_column()
                    dpg.add_table_column()
                    with dpg.table_row():
                        for label in trial_labels[0]:  # ["Reward-Phase", "Intertrial-Phase"]
                            tag = f"button{label}"
                            dpg.add_button(
                                label=label,
                                tag=tag,
                                width=220,
                                height=60,
                                indent = 150,
                                callback=lambda s=tag: toggle_trial_button(s, buttons_trials, active_theme, ser1, ser2)
                            )
                            buttons_trials[tag] = {"checked": False}

            # Relay buttons below, aligned left with indent
            with dpg.group(horizontal=False):
                dpg.add_spacer(width=50, height = 100)

                # Reward 1 table
                with dpg.group():
                    dpg.add_text("Reward 1", indent=500)
                    with dpg.table(width=1100, header_row=False):
                        for _ in range(8): dpg.add_table_column()
                        for row in label_table:
                            with dpg.table_row():
                                for label in row:
                                    tag = f"button1_{label}"
                                    dpg.add_button(
                                        label=str(label),
                                        tag=tag,
                                        width=100,
                                        height=40,
                                        callback=(lambda s=tag, d=buttons_lickports1, p="1": lambda: toggle_lickport_button(s, d, p, active_theme))()
                                    )
                                    buttons_lickports1[tag] = {"checked": False}

                # Reward 2 table
                with dpg.group():
                    dpg.add_text("Reward 2", indent=500)
                    with dpg.table(width=1100, header_row=False):
                        for _ in range(8): dpg.add_table_column()
                        for row in label_table:
                            with dpg.table_row():
                                for label in row:
                                    tag = f"button2_{label}"
                                    dpg.add_button(
                                        label=str(label),
                                        tag=tag,
                                        width=100,
                                        height=40,
                                        callback=(lambda s=tag, d=buttons_lickports2, p="2": lambda: toggle_lickport_button(s, d, p, active_theme))()
                                    )
                                    buttons_lickports2[tag] = {"checked": False}

            # --- Sensor plots table ---
            with dpg.group(horizontal=False):
                dpg.add_text("Sensor Plots:")

            with dpg.table(header_row=False, resizable=False, policy=dpg.mvTable_SizingFixedFit,
                           borders_innerV=True, borders_outerH=True, width=screen_width - 100):
                cols = 4
                for _ in range(cols):
                    dpg.add_table_column()

                for i in range(0, 16, cols):
                    with dpg.table_row():
                        for j in range(cols):
                            idx = i + j
                            if idx >= 16:
                                break
                            with dpg.table_cell():
                                with dpg.plot(label=f"Sensor {idx+1}", tag=f"sensor_plot_{idx}", height=200, width=260):  # smaller size
                                    dpg.add_plot_axis(dpg.mvXAxis, tag=f"sensor_plot_{idx}_xaxis")
                                    dpg.add_plot_axis(dpg.mvYAxis, tag=f"sensor_plot_{idx}_yaxis")
                                    dpg.add_line_series([], [], label=f"Sensor {idx+1} data",
                                                        parent=f"sensor_plot_{idx}_yaxis", tag=f"sensor_plot_{idx}_line")

def main_loop():
    global plots_initialized, frame_counter
    if ser1 is None or ser2 is None:
        time.sleep(0.1)
        dpg.render_dearpygui_frame()
        return

    ser1.write(b's')
    ser2.write(b's')

    line1 = clean_serial_line(ser1.readline().decode('utf-8'))
    line2 = clean_serial_line(ser2.readline().decode('utf-8'))
    ts1, vals1 = parse_sensor_line(line1)
    ts2, vals2 = parse_sensor_line(line2)

    def append_sensor_data(ts, values, port):
        for i, val in enumerate(values):
            sensor_id = sensor_mapping[port][i]
            idx = sensor_id - 1
            timestamps[idx].append(ts)
            shift_data_window(timestamps[idx], MAX_POINTS)
            data_buffers[idx].append(val)
            shift_data_window(data_buffers[idx], MAX_POINTS)

    if ts1:
        append_sensor_data(ts1, vals1, "ser1")
    if ts2:
        append_sensor_data(ts2, vals2, "ser2")

    if not plots_initialized:
        plots_initialized = True

    frame_counter += 1
    if frame_counter % UPDATE_PLOT_EVERY_N_FRAMES == 0:
        for i in range(16):
            line_tag = f"sensor_plot_{i}_line"
            xaxis_tag = f"sensor_plot_{i}_xaxis"
            yaxis_tag = f"sensor_plot_{i}_yaxis"

            if dpg.does_item_exist(line_tag) and timestamps[i]:
                update_plot_series(line_tag, timestamps[i], data_buffers[i])
                dpg.set_axis_limits(xaxis_tag, timestamps[i][0], timestamps[i][-1])
                y_min = min(data_buffers[i]) if data_buffers[i] else 0
                y_max = max(data_buffers[i]) if data_buffers[i] else 1
                dpg.set_axis_limits(yaxis_tag, y_min, y_max + 1000)

    dpg.render_dearpygui_frame()

def main():
    initialize_serial_connections()
    build_gui()

    dpg.show_viewport()
    print("Starting GUI loop...")

    while dpg.is_dearpygui_running():
        main_loop()

    print("GUI closed. Destroying context.")
    dpg.destroy_context()

if __name__ == "__main__":
    main()
