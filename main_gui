import dearpygui.dearpygui as dpg
import time
import cv2
import os
from shared_states import (
    ser1, ser2,
    UPDATE_PLOT_EVERY_N_FRAMES, sensor_mapping, data_buffers, 
    timestamps, plots_initialized, frame_counter, MAX_POINTS)
import shared_states
from utils import (
    clean_serial_line, update_plot_series,
    parse_sensor_line, initialize_serial_connections,
    build_gui, update_camera_feed, get_camera_frame,
    append_sensor_data
)



def main_loop():
    global plots_initialized, frame_counter
    if ser1 is None or ser2 is None:
        time.sleep(0.1)
        dpg.render_dearpygui_frame()
        return

    # Get frame from camera (mock or real)
    frame = get_camera_frame()
    if frame is not None:
        update_camera_feed()  # Show in GUI

    # Always read sensors
    ser1.write(b's')
    ser2.write(b's')

    line1 = clean_serial_line(ser1.readline().decode('utf-8'))
    line2 = clean_serial_line(ser2.readline().decode('utf-8'))
    ts1, vals1 = parse_sensor_line(line1)
    ts2, vals2 = parse_sensor_line(line2)

    # Append to buffers for live plotting
    if ts1:
        append_sensor_data(ts1, vals1, "ser1", sensor_mapping, timestamps, data_buffers, MAX_POINTS)
    if ts2:
        append_sensor_data(ts2, vals2, "ser2", sensor_mapping, timestamps, data_buffers, MAX_POINTS)

    # Write to CSV if recording
    if shared_states.is_recording:
        timestamp = timestamps[0][-1] if timestamps[0] else time.strftime("%Y-%m-%d %H:%M:%S")
        if shared_states.csv_writer:
            combined_vals = [0] * 16
            if vals1:
                for i, val in enumerate(vals1):
                    combined_vals[i] = val
            if vals2:
                for i, val in enumerate(vals2):
                    combined_vals[i + 8] = val
            shared_states.csv_writer.writerow([timestamp] + combined_vals)
            shared_states.csv_file.flush()
        else:
            print("[WARNING] csv_writer is None!")
        if shared_states.current_session_path and frame is not None:
            img_filename = os.path.join(f"{shared_states.current_session_path}/frames", f"frame_{int(timestamp)}.jpg")
            cv2.imwrite(img_filename, frame)

    # Plot updates
    frame_counter += 1
    if frame_counter % UPDATE_PLOT_EVERY_N_FRAMES == 0:
        for i in range(16):
            line_tag = f"sensor_plot_{i}_line"
            xaxis_tag = f"sensor_plot_{i}_xaxis"
            yaxis_tag = f"sensor_plot_{i}_yaxis"

            if dpg.does_item_exist(line_tag) and timestamps[i]:
                update_plot_series(line_tag, timestamps[i], data_buffers[i])
                dpg.set_axis_limits(xaxis_tag, timestamps[i][0], timestamps[i][-1])
                y_min = min(data_buffers[i]) if data_buffers[i] else 0
                y_max = max(data_buffers[i]) if data_buffers[i] else 1
                dpg.set_axis_limits(yaxis_tag, y_min, y_max + 1000)

    dpg.render_dearpygui_frame()

def main():
    initialize_serial_connections()
    build_gui()

    dpg.show_viewport()
    print("Starting GUI loop...")

    while dpg.is_dearpygui_running():
        main_loop()

    print("GUI closed. Destroying context.")
    dpg.destroy_context()

if __name__ == "__main__":
    main()

